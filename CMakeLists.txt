cmake_minimum_required(VERSION 2.4.4)
if(COMMAND cmake_policy)
      cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)
PROJECT(GemRB)

IF( NOT PLUGIN_INSTALL_DIR )
 SET( PLUGIN_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/plugins )
ENDIF( NOT PLUGIN_INSTALL_DIR )

IF( NOT OVERRIDE_INSTALL_DIR )
 SET( OVERRIDE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/override )
ENDIF( NOT OVERRIDE_INSTALL_DIR )

IF( NOT GUISCRIPTS_INSTALL_DIR )
 SET( GUISCRIPTS_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/GUIScripts )
ENDIF( NOT GUISCRIPTS_INSTALL_DIR )

IF( NOT MANPAGE_INSTALL_DIR )
 SET( MANPAGE_INSTALL_DIR ${CMAKE_INSTALL_PREFIX}/share/man/man6 )
ENDIF( NOT MANPAGE_INSTALL_DIR )

IF(CMAKE_COMPILER_IS_GNUCXX)
 SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

MESSAGE(STATUS "Looking for Python libraries")
INCLUDE(FindPythonLibs)
IF(PYTHON_LIBRARY)
 MESSAGE(STATUS "Python Libraries Found")
ELSE(PYTHON_LIBRARY)
 MESSAGE(FATAL_ERROR "Unable to find Python development libraries. Please get it from www.python.org")
ENDIF(PYTHON_LIBRARY)

MESSAGE(STATUS "Looking for openAL libraries")
INCLUDE(FindOpenAL)
IF(OPENAL_FOUND)
 MESSAGE(STATUS "openal found")
ELSE(OPENAL_FOUND)
 MESSAGE(FATAL_ERROR "unable to find openal. please set OPENALDIR environment variable or get it from www.openal.org")
ENDIF(OPENAL_FOUND)

MESSAGE(STATUS "Looking for SDL")
INCLUDE(FindSDL)
IF(SDL_FOUND)
 MESSAGE(STATUS "SDL found")
ELSE(SDL_FOUND)
 MESSAGE(FATAL_ERROR "unable to find SDL. please get it from www.libsdl.org")
ENDIF(SDL_FOUND)

MESSAGE( STATUS "Looking for Zlib" )
#SET(ZLIB_FIND_REQUIRED TRUE)
INCLUDE(FindZLIB)

MESSAGE( STATUS "Looking for libPNG" )
INCLUDE(FindPNG)
IF(PNG_FOUND)
 MESSAGE( STATUS "libPNG found" )
ELSE(PNG_FOUND)
 MESSAGE( STATUS "WARNING : GemRB will be built without any PNG support. Get it from www.libpng.org" )
ENDIF(PNG_FOUND)

IF(UNIX)
 MESSAGE(STATUS "Looking for dl library")
 FIND_LIBRARY(DLD_LIBRARY_PATH dl dld)
 IF(DLD_LIBRARY_PATH)
  MESSAGE(STATUS "dl library found")
 ELSE(DLD_LIBRARY_PATH)
  MESSAGE(FATAL_ERROR "dl library not found")
 ENDIF(DLD_LIBRARY_PATH)
ENDIF(UNIX)

MESSAGE(STATUS "Looking for Ogg Vorbis support")
FIND_LIBRARY(VORBIS_LIBRARY vorbisfile)

ADD_DEFINITIONS("-DHAVE_CONFIG_H")

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

#Platform checks
INCLUDE (CheckTypeSize)
CHECK_TYPE_SIZE("int" SIZEOF_INT)
CHECK_TYPE_SIZE("long int" SIZEOF_LONG_INT)

INCLUDE (CheckFunctionExists)
CHECK_FUNCTION_EXISTS("snprintf" HAVE_SNPRINTF)
CHECK_FUNCTION_EXISTS("strndup" HAVE_STRNDUP)

#Unneeded on windows
IF(NOT WIN32)
INCLUDE (CheckCXXSourceCompiles)
CHECK_CXX_SOURCE_COMPILES("typedef void *(* voidvoid)(void);

void *object = 0;
voidvoid function;
function = (voidvoid) object;
" PERMITS_OBJECT_TO_FUNCTION_CAST)

IF( NOT PERMITS_OBJECT_TO_FUNCTION_CAST )
 SET(HAVE_FORBIDDEN_OBJECT_TO_FUNCTION_CAST 1)
ENDIF( NOT PERMITS_OBJECT_TO_FUNCTION_CAST )
ENDIF(NOT WIN32)

IF(VORBIS_LIBRARY)
 SET(HAS_VORBIS_SUPPORT 1)
ELSE(VORBIS_LIBRARY)
 SET(VORBIS_LIBRARY "")
ENDIF(VORBIS_LIBRARY)

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/cmake_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)

#Plugin addtion macro
MACRO(ADD_GEMRB_PLUGIN plugin_name)
ADD_LIBRARY(${plugin_name} MODULE ${ARGN})
IF(WIN32)
 TARGET_LINK_LIBRARIES(${plugin_name} gemrb_core)
ENDIF(WIN32)
ENDMACRO(ADD_GEMRB_PLUGIN)

#gemrb overrides macro
MACRO(ADD_GEMRB_OVERRIDE game_name)
FILE( GLOB FILES_TO_INSTALL *.2da *.bmp *.ini *.chu *.ids *.bcs *.vvc *.mos *.spl *.wav *.pro)
INSTALL( FILES ${FILES_TO_INSTALL} DESTINATION ${OVERRIDE_INSTALL_DIR}/${game_name} )
ENDMACRO(ADD_GEMRB_OVERRIDE )

ADD_SUBDIRECTORY( gemrb )
INSTALL( FILES gemrb.6 DESTINATION ${MANPAGE_INSTALL_DIR} )
