Scripts:
1. ToB specific actions/triggers, like pocketplane (so ToB will work)
2. (PARTLY) Properly detect the play mode (sp/mp, normal/extended)

Combat:
1. fix combat round timings
2. implement customisable combat calculation, it should be general enough to
simulate all games, without any hardcoded parts

Items:
6. (PARTLY) Break items, count charges
7. Implement switching weapon abilities
8. (PARTLY) Implement item usage (similar to spells)

Effects:
1. (DONE) Create base system for effect blocks
2. (DONE-almost) Implement common effects
3. (PARTLY) Implement IWD2 effects
4. (DONE-almost) Implement TOB effects
5. (PARTLY) Implement PST effects
6. Implement area/non-living affecting effects 

Area:
2. Don't load scripts for pile items? (research when a script is unused)
3. (DONE) Create real streaming ambients (do not preload them, just use them when needed)
4. (DONE) in pathfinder, calculate with the actor's feet circle size (npc blocking still needed)
5. (DONE) fix door wallgroups and tiles (some problems with overlays still exist)
6. (DONE) Handle extended night flag (alternate lightmap, tileset, minimap)

Store:
no tasks

Animation:
1. (PARTLY) fix char animation sequences
5. (DONE) Handle equipment animations (armourlevel, weapons) - this seems to be done by wjp/avenger
7. stanceID is still fuzzy. Fix it. (FIXED?)
8. Implement projectile animations (area, cone, fragments)

Actor:
2. Use the character sheet (Actor.cpp) itself to store attributes of the character 
   during character generation. 
   Benefits: data is already stored in the destination, data constraints and relations 
   are easily implemented.
   How to: replace GemRB.SetVar with GemRB.SetPlayerStat. Don't forget to create
   the character first. - see iwd2 chargen for a partially implemented solution
3. Move position of actor (and ground circle) to the center of a searchmap cell


Game GUI:
2. (PARTLY) implement class based (but customisable) action button bar. Generally port
   the IWD2 system to all engines
3. implement grabbing mouse pointer by a control to fix dragging of PST Float menu window
4. (DONE) Fix multi line editboxes. Allow attaching of scrollbar. - Avenger, i think it is done
5. (PARTLY) Fix drop capitals (initials) Calculate text height/width correctly, display
   it correctly too.
6. (PARTLY) Fix unwanted screen shake (especially when on bottom of area)
7. Level up code, this should be written mostly in GuiScript!!!
8. Contingency, spell trigger setup windows

General:
1. The Cache and Variables classes could be rewritten to incorporate the release 
   function more smoothly (use templates?)
2. various directories (GemRB override, game override ...) should be resolved 
   right after loading config files and remain static afterwards. Maybe define 
   some PATH variable describing all the directories searched for files
4. valgrind reports a big heap of unreleased python objects


Graphics:
1. use scaling in Video::SpriteScaleDown() instead of in Video::GetPreview() 
   and in BMPImporter
2. move SDLVideoDriver sprite functions to their own file, rename them to 
   SpriteIsPixelTransparent etc.
3. (PARTLY) Add PNG support? (still image done)

Sound:
1. valgrind reports invalid memory access due to Unqueueing buffers and using 
   them in another thread (openal weirdness?)
2. (PARTLY) sounds get sometimes distorted, might be connected to problem #1
3. (PARTLY) Separate OpenAL interface from ACM loader and MVE player

Building:
1. fix include paths during compilation, so the files do not 
   use #include "../../Core/something.h" etc.

Release:
1. Create packages for various distros and get them to distributions. Requires
   maintainers.
2. Get a sample game with some free license which could be distributed
   with GemRB.


Documentation:
2. (PARTLY) make tool to scan source files for those with non-standard
   copyright notices
3. Add Doxygen doc comments to more objects
4. Write GemRB overview, structure and high-level flow docs


Community:
2. (DONE-needs more work) Update the web page, get rid of postnuke
3. Move this todo to bug/task tracker at Sourceforge :-)
