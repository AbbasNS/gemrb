#! /bin/sh

# gemrb - temporary wrapper script for .libs/gemrb
# Generated by ltmain.sh - GNU libtool 1.4a (1.641.2.206mm 2001/04/03 21:47:47)
#
# The gemrb program cannot be directly executed until all the libtool
# libraries that it depends on are installed.
#
# This wrapper script should never be moved out of the build directory.
# If it is, it will not operate correctly.

# Sed substitution that helps us do robust quoting.  It backslashifies
# metacharacters that are still active within double-quoted strings.
Xsed='sed -e 1s/^X//'
sed_quote_subst='s/\([\\`\\"$\\\\]\)/\\\1/g'

# The HP-UX ksh and POSIX shell print the target directory to stdout
# if CDPATH is set.
if test "${CDPATH+set}" = set; then CDPATH=:; export CDPATH; fi

relink_command="cd /home/daniele/gemrb/gemrb; { test -z \"\${LIBRARY_PATH+set}\" || unset LIBRARY_PATH || { LIBRARY_PATH=; export LIBRARY_PATH; }; }; { test -z \"\${COMPILER_PATH+set}\" || unset COMPILER_PATH || { COMPILER_PATH=; export COMPILER_PATH; }; }; { test -z \"\${GCC_EXEC_PREFIX+set}\" || unset GCC_EXEC_PREFIX || { GCC_EXEC_PREFIX=; export GCC_EXEC_PREFIX; }; }; { test -z \"\${LD_RUN_PATH+set}\" || unset LD_RUN_PATH || { LD_RUN_PATH=; export LD_RUN_PATH; }; }; { test -z \"\${LD_LIBRARY_PATH+set}\" || unset LD_LIBRARY_PATH || { LD_LIBRARY_PATH=; export LD_LIBRARY_PATH; }; }; PATH=\"/usr/lib/qt3/bin:/usr//bin:/bin:/usr/bin::/usr/local/bin:/usr/X11R6/bin:/usr/games:/usr/java/j2sdk1.4.2_01/bin:/home/daniele/bin\"; export PATH; c++ -Wnon-virtual-dtor -Wno-long-long -Wbad-function-cast -Wundef -Wall -pedantic -W -Wpointer-arith -Wmissing-prototypes -Wwrite-strings -ansi -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -Wcast-align -Wconversion -fno-builtin -g -O2 -O0 -g3 -Wall -fno-exceptions -fno-check-new -o \$progdir/\$file GemRB.o  ./plugins/AREImporter/.libs/libAREImporter.so -L/home/daniele/gemrb/gemrb/plugins/Core -L/usr//bin/../lib/gcc-lib/i586-mandrake-linux-gnu/3.2.2 -L/usr//bin/../lib/gcc-lib -L/usr/lib/gcc-lib/i586-mandrake-linux-gnu/3.2.2 -L/usr//bin/../lib/gcc-lib/i586-mandrake-linux-gnu/3.2.2/../../.. -L/usr/lib/gcc-lib/i586-mandrake-linux-gnu/3.2.2/../../.. ./plugins/BAMImporter/.libs/libBAMImporter.so ./plugins/BG2HCAnim/.libs/libBG2HCAnim.so ./plugins/BIFImporter/.libs/libBIFImporter.so ./plugins/BMPImporter/.libs/libBMPImporter.so ./plugins/CHUImporter/.libs/libCHUImporter.so ./plugins/Core/.libs/libcore.so ./plugins/CREImporter/.libs/libCREImporter.so ./plugins/IDSImporter/.libs/libIDSImporter.so ./plugins/KEYImporter/.libs/libKEYImporter.so ./plugins/MOSImporter/.libs/libMOSImporter.so ./plugins/MVEPlayer/.libs/libMVEPlayer.so ./plugins/SDLVideo/.libs/libSDLVideo.so /usr/lib/libSDL.so -L/usr/X11R6/lib -lX11 -lXext ./plugins/TISImporter/.libs/libTISImporter.so ./plugins/TLKImporter/.libs/libTLKImporter.so ./plugins/WEDImporter/.libs/libWEDImporter.so ./plugins/ZLibMgr/.libs/libZLibMgr.so -lz ./plugins/GUIScript/.libs/libGUIScript.so -lpython2.3 ./plugins/ACMImporter/.libs/libACMImporter.so -lfmod-3.70 -lpthread ./plugins/MUSImporter/.libs/libMUSImporter.so ./plugins/2DAImporter/.libs/lib2DAImporter.so /home/daniele/gemrb/gemrb/plugins/Core/.libs/libcore.so -ldl -lstdc++ -lm -lc -lgcc_s -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/AREImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/BAMImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/BG2HCAnim/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/BIFImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/BMPImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/CHUImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/Core/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/CREImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/IDSImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/KEYImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/MOSImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/MVEPlayer/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/SDLVideo/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/TISImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/TLKImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/WEDImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/ZLibMgr/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/GUIScript/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/ACMImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/MUSImporter/.libs -Wl,--rpath -Wl,/home/daniele/gemrb/gemrb/plugins/2DAImporter/.libs -Wl,--rpath -Wl,/usr/local/lib"

# This environment variable determines our operation mode.
if test "$libtool_install_magic" = "%%%MAGIC variable%%%"; then
  # install mode needs the following variable:
  uninst_deplibs=' ./plugins/AREImporter/libAREImporter.la ./plugins/BAMImporter/libBAMImporter.la ./plugins/BG2HCAnim/libBG2HCAnim.la ./plugins/BIFImporter/libBIFImporter.la ./plugins/BMPImporter/libBMPImporter.la ./plugins/CHUImporter/libCHUImporter.la ./plugins/Core/libcore.la ./plugins/CREImporter/libCREImporter.la ./plugins/IDSImporter/libIDSImporter.la ./plugins/KEYImporter/libKEYImporter.la ./plugins/MOSImporter/libMOSImporter.la ./plugins/MVEPlayer/libMVEPlayer.la ./plugins/SDLVideo/libSDLVideo.la ./plugins/TISImporter/libTISImporter.la ./plugins/TLKImporter/libTLKImporter.la ./plugins/WEDImporter/libWEDImporter.la ./plugins/ZLibMgr/libZLibMgr.la ./plugins/GUIScript/libGUIScript.la ./plugins/ACMImporter/libACMImporter.la ./plugins/MUSImporter/libMUSImporter.la ./plugins/2DAImporter/lib2DAImporter.la /home/daniele/gemrb/gemrb/plugins/Core/libcore.la'
else
  # When we are sourced in execute mode, $file and $echo are already set.
  if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
    echo="echo"
    file="$0"
    # Make sure echo works.
    if test "X$1" = X--no-reexec; then
      # Discard the --no-reexec flag, and continue.
      shift
    elif test "X`($echo '\t') 2>/dev/null`" = 'X\t'; then
      # Yippee, $echo works!
      :
    else
      # Restart under the correct shell, and then maybe $echo will work.
      exec /bin/sh "$0" --no-reexec ${1+"$@"}
    fi
  fi

  # Find the directory that this script lives in.
  thisdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`
  test "x$thisdir" = "x$file" && thisdir=.

  # Follow symbolic links until we get to the real thisdir.
  file=`ls -ld "$file" | sed -n 's/.*-> //p'`
  while test -n "$file"; do
    destdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`

    # If there was a directory component, then change thisdir.
    if test "x$destdir" != "x$file"; then
      case "$destdir" in
      [\\/]* | [A-Za-z]:[\\/]*) thisdir="$destdir" ;;
      *) thisdir="$thisdir/$destdir" ;;
      esac
    fi

    file=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
    file=`ls -ld "$thisdir/$file" | sed -n 's/.*-> //p'`
  done

  # Try to get the absolute directory name.
  absdir=`cd "$thisdir" && pwd`
  test -n "$absdir" && thisdir="$absdir"

  program=lt-'gemrb'
  progdir="$thisdir/.libs"

  if test ! -f "$progdir/$program" || \
     { file=`ls -1dt "$progdir/$program" "$progdir/../$program" 2>/dev/null | sed 1q`; \
       test "X$file" != "X$progdir/$program"; }; then

    file="$$-$program"

    if test ! -d "$progdir"; then
      mkdir "$progdir"
    else
      rm -f "$progdir/$file"
    fi

    # relink executable if necessary
    if test -n "$relink_command"; then
      if (eval $relink_command); then :
      else
	rm -f "$progdir/$file"
	exit 1
      fi
    fi

    mv -f "$progdir/$file" "$progdir/$program" 2>/dev/null ||
    { rm -f "$progdir/$program";
      mv -f "$progdir/$file" "$progdir/$program"; }
    rm -f "$progdir/$file"
  fi

  if test -f "$progdir/$program"; then
    if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
      # Run the actual program with our arguments.

      # Export the path to the program.
      PATH="$progdir:$PATH"
      export PATH

      exec $program ${1+"$@"}

      $echo "$0: cannot exec $program ${1+"$@"}"
      exit 1
    fi
  else
    # The program doesn't exist.
    $echo "$0: error: $progdir/$program does not exist" 1>&2
    $echo "This script is just a wrapper for $program." 1>&2
    echo "See the libtool documentation for more information." 1>&2
    exit 1
  fi
fi
